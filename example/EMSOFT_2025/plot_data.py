"""
Uses seaborn to plot.
Takes old csv files from paper publication as inputs.
pandas.DataFrames are not the original input but the csv generated by the experiment is converted
into them
"""
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import argparse
import csv

# Import python lib
import sys
import os


def csv_to_panda(filename):
    """
    Should return tidy panda data
    """
    print("Read panda data from csv file")
    data = pd.read_csv(filename)
    return data



def plot_analysis_running_paper_example(data, pdffilename):
    print(" ------------------------------------------------ analysis_running_paper_example ------------------------------------------------ ")
    for index, row in data.iterrows():
        print(f"Stream: {row['stream_name']}, Latency: {row['latency_value']} , Offset: {row['offset']}")





    


def plot_analysis_automotive_ring_data_rates(data, pdffilename):

    print(" ------------------------------------------------ plot_latency_data_rates_automotive ------------------------------------------------ ")
    
    # Colors
    current_palette = sns.color_palette()
    colors = [current_palette[2], current_palette[1], current_palette[0], current_palette[3], current_palette[4], current_palette[5], current_palette[6]]
    	
    # Convert values to ms
    data["latency_value"] = 0.001 * 0.001 * data["latency_value"]
    
    # Create diagram
    flierprops = dict(marker='o', markerfacecolor='black', markersize=6,  linestyle='none', markeredgecolor="grey")
    plt.figure(figsize=(10,3.2))
    sns.set(style="whitegrid", palette="muted", font_scale=1)
    ax =sns.boxplot(x="nbr_object_streams", y='latency_value', hue='data_rate', data=data, dodge=True, linewidth=1.0, palette=colors, flierprops=flierprops) #, hue_order=hue_order)


    
    ax.legend(loc='upper left', fontsize=18)
    leg = ax.get_legend()
    leg.set_title("Type of evaluation",prop={'size':18,'weight':'bold'})
    new_labels = ["100Mbps","1Gbps", "10Gbps"	]
    for t, l in zip(leg.texts, new_labels): 
        t.set_text(l)
    
    
    
    
    print("Worst case latency cluster analysis: " + str(data["latency_composed_analysis"].max()))
    
    # Format axis values
    ax.tick_params(labelsize=14)
    ax.set_xlabel("Number of sensor data sample streams", fontsize = 1)
    ax.set_ylabel("Sample stream \n WCRTs [ms]", fontsize = 18)

    ax.set_yticks([0,2,3,4,6,8,10,12,14,16],[0,"2","3","4","6","8","10","12","14","16"])
    #ax.set(ylim=(3, 12))
    
    plt.plot()
    plt.tight_layout()

    plt.savefig(pdffilename)
    
    
    
def plot_basic_latency_evaluation_diagram_industrial(data, pdffilename):

    print(" ------------------------------------------------ plot_basic_latency_evaluation_diagram_industrial ------------------------------------------------ ")
    
    # Colors
    #current_palette = sns.color_palette()
    #colors = [current_palette[2], current_palette[0], current_palette[1], current_palette[3], current_palette[4], current_palette[5], current_palette[6]]
    	
    # Convert values to ms
    data["latency_value"] = 0.001 * 0.001 * data["latency_value"]


    
    flierprops = dict(marker='o', markerfacecolor='black', markersize=6,  linestyle='none', markeredgecolor="grey")
    plt.figure(figsize=(10,3.2))
    sns.set(style="whitegrid", palette="muted", font_scale=1)
    ax =sns.boxplot(x="nbr_object_streams", y='latency_value', data=data, dodge=True, linewidth=1.0, color = "mediumseagreen",  flierprops = flierprops)



    
    ax.legend(loc='upper left', fontsize=18)
    leg = ax.get_legend()
    leg.set_title("Type of evaluation",prop={'size':18,'weight':'bold'})
    new_labels = ["Simulation", "Frame cluster analysis"]
    for t, l in zip(leg.texts, new_labels): 
        t.set_text(l)

    
    print("---------------------- all streams -----------------------")
    print("Worst case latency cluster analysis: " + str(data["latency_value"].max()) + "ms")
    
    # Format axis values
    ax.tick_params(labelsize=18)
    ax.set_xlabel("Number of sensor data sample streams", fontsize = 18)
    ax.set_ylabel("Sample stream \n WCRTs [ms]", fontsize = 18)

    plt.plot()
    plt.tight_layout()

    plt.savefig(pdffilename)
    












    
    
if __name__ == '__main__':

    parser = argparse.ArgumentParser(epilog='NOTE: Takes data from seaborn exporter as csv')
    parser.add_argument("--csv",type=str, default="./output/analysis_and_simulation_results.csv",
            help="Filename of the .csv file")
    parser.add_argument("--method", type=int, default=0,
            help="The file and matplotlib supported fileype to which the plot is written. Specify a filename")

    args = parser.parse_args()
    
    input_file = args.csv
    input_file = "./output/analysis_and_simulation_results_without_sync_analysis"
    if args.method == 1:
        input_file = "./output/analysis_running_paper_example.csv"
        data = csv_to_panda(input_file)
        plot_analysis_running_paper_example(data , "./output/analysis_running_paper_example.pdf")
    if args.method == 2:
        input_file = "./output/analysis_automotive_ring_data_rates.csv"
        data = csv_to_panda(input_file)
        plot_analysis_automotive_ring_data_rates(data , "./output/analysis_automotive_ring_data_rates.pdf")
    if args.method == 3:
        input_file = "./output/analysis_industrial_line.csv"
        data = csv_to_panda(input_file)
        plot_basic_latency_evaluation_diagram_industrial(data, "./output/analysis_industrial_line.pdf")
    if args.method == 4:
        input_file = "./output/analysis_industrial_star.csv"
        data = csv_to_panda(input_file)
        plot_basic_latency_evaluation_diagram_industrial(data , "./output/analysis_industrial_star.pdf")









